@page "/templates"
@rendermode InteractiveServer
@inject IApi _api

<PageTitle>Templates</PageTitle>

<h3>Meme Templates</h3>

@if (Loading)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col text-center d-flex justify-content-center">
                <div class="d-flex">
                    <Icon Value="sync" Spin="true" Flip="true" Speed="1.5s" />
                    <span class="mt-auto mb-auto">
                        Loading...
                    </span>
                </div>
            </div>
        </div>
    </div>
}
else if (Error is not null)
{
    <p><em>Error Occurred: </em> @Error</p>
    <ul>
        @foreach (var error in Results?.Errors ?? [])
        {
            <li>@error</li>
        }
    </ul>
}
else
{
    <div class="container mt-5">
        <div class="row">
            @for(var i = 0; i < AllTemplates.Length; i++)
            {
                var current = AllTemplates[i];
                <div class="col-4 col-md-6 col-sm-12">
                    <div class="card mb-3">
                        <div class="card-header">
                            @current.Name (@current.Id)
                        </div>
                        <div class="card-body">
                            <p>@current.Description</p>
                            <img src="/api/media/templates/@current.Id" class="img-fluid" alt="@current.Name" />
                        </div>
                        <div class="card-footer">
                            <a class="btn btn-primary" href="/templates/@current.Id">Generate Meme</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {
    private string? _error;

    public bool Loading { get; set; } = false;

    public BoxedArray<MemeTemplate>? Results { get; set; }

    public string? Error => _error ?? ((Results?.Errors is not null && Results.Errors.Length > 0) ? "An error occurred while fetching templates." : null);

    public MemeTemplate[] AllTemplates { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Loading = true;
            Results = await _api.Templates.Get();
            AllTemplates = Results?.Data ?? [];
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            Loading = false;
        }
    }
}
